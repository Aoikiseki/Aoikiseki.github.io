<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git-&amp;-Gerrit</title>
      <link href="/Git-&amp;-Gerrit"/>
      <url>/Git-&amp;-Gerrit</url>
      
        <content type="html"><![CDATA[<h2 id="Git基本知识"><a href="#Git基本知识" class="headerlink" title="Git基本知识"></a>Git基本知识</h2><p>推荐一个Git可视化动画练习的网站<a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></p><p>在熟悉Git前需要先了解三个基本概念：</p><ol><li>工作区：可以理解为当前的工程文件夹</li><li>暂存区：暂时保存对工作区的修改，需要commit才能将暂存区的修改实现相对永久的保存</li><li>远程仓库：存储代码的远端Git服务器</li></ol><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>略去安装过程，安装结束后需要指定本机用户名和邮箱</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config <span class="operator">--</span>global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">$ git config <span class="operator">--</span>global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Git的基本操作"><a href="#Git的基本操作" class="headerlink" title="Git的基本操作"></a>Git的基本操作</h3><ol><li>创建仓库<code>git init</code></li><li>添加文件到暂存区<code>git add readme.txt</code></li><li>从暂存区删除文件<code> git reset 文件名</code></li><li>提交修改<code>git commit –m &quot;wrote a readme file&quot;</code>-m为本次提交的说明，如果需要对上一次的提交进行补充，使用<code>git commit --amend</code></li><li>查看日志<code>git log</code>可以提交查看日志，看每次提交修改了什么，–pretty=oneline可以精简地以一行进行显示，commit id是每次提交的标识符</li><li>版本回退<code>git reset --hard HEAD^</code> <code>HEAD</code>表示本地仓库的当前版本，<code>HEAD^</code>为上一版本，<code>HEAD~X</code>为上X个版本</li><li>恢复新版本<code>git reflog</code>可以查看历史提交的commit id，然后使用<code>git reset id</code>即可回退至指定位置<br>查看仓库状态<code>git status</code>查看仓库状态</li><li>查看工作区和版本库的区别<code>git diff</code></li><li>撤销修改<code>git checkout -- file</code>，该命令可以丢弃工作区的修改，若file修改后未放到暂存区，则回到和版本库一样的状态；若放到暂存区修改，则回到放到暂存区后的样子，总之该指令会撤销工作区的修改。<br><strong>注: 凭借checkout，可以将误删的文件加回来！</strong></li><li>暂存区重新放回工作区（暂存区撤回）<code>git reset HEAD file</code></li><li>文件删除<code>git rm file</code> </li><li>推送到远程仓库<code>git remote origin 远端地址</code> + <code>git push –u origin master</code>  -u不仅会推送，还会将本地和远程关联，简化命令，然后就可以git push origin master即可。<br><strong>注意</strong>：连接远程库之前需要现在本地生成<code>ssh-key</code>并填写在远端才能成功push</li></ol><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><ol><li><p>创建新分支并切换<code>git checkout –b dev</code> = <code>git branch dev</code> + <code>git checkout dev</code></p></li><li><p>查看分支<code>git branch</code></p></li><li><p>合并分支<code>git merge xxx</code>，例如想要将<code>test</code>分支合并至<code>master</code>分支，需要在master分支上使用<code>git merge test</code></p><p><strong>注</strong>：merge结束后会生成一个merge commit<br>（PS: 2020年起github启用main作为主分支）</p></li><li><p>分支变基<code>git rebase</code><br>关于变基这里可以举一个例子方便说明，比如你从<code>master</code>分支切出一个名为<code>develop</code>的分支，那么<code>develop</code>分支的基就是当前时间点的<code>master</code>；接下来你在<code>develop</code>分支上进行了开发，在本地提交了<code>commit</code>这个<code>commit</code>也是以<code>master</code>为基；过了一段时间<code>master</code>分支的内容被别人修改，此时你尝试push显然会失败；而如果你的<code>commit</code>是以最新时间点的<code>master</code>为基，就可以成功push，所以你需要找一种方法，能够让你的commit变成以最新时间点的<code>master</code>作为基，这就是rebase的作用。</p></li><li><p>删除分支<code>git branch –d xxx</code></p></li><li><p>当前工作环境保存<code>git stash</code>，相当于将当前的修改<strong>剪切</strong>并压栈，为了便于识别可以使用<code>git stash save &quot;name&quot;</code>指定名称，使用<code>git stash list</code>查看所有被保存的修改，使用<code>git stash pop stash@&#123;x&#125;</code>或者<code>git stash pop name</code>将修改出栈并应用到当前分支。<br><code>git stash pop</code> = <code>git stash apply xxx</code> + <code>git stash drop xxx</code>，所以如果不希望修改出栈，只希望将修改应用到当前分支，使用<code>git stash apply</code></p></li><li><p>复制指定commitid的提交到当前分支<code>git cherry-pick &#123;commitid&#125;</code></p></li><li><p>在远端开分支<code>git co -b xxx</code> + <code>git push xxx</code></p></li></ol><h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h3><p>安装子模块<code>git submodule update --init --recursive</code></p><h3 id="–soft-–mixed-–hard"><a href="#–soft-–mixed-–hard" class="headerlink" title="–soft –mixed –hard"></a>–soft –mixed –hard</h3><p>一些指令（比如<code>git reset</code>）中有–mode参数，含义如下：</p><ol><li>–soft：仅仅改变HEAD指针，不改变暂存区和工作区。</li><li>–mixed（默认）：改变HEAD指针，改变暂存区，不改变工作区。即目录下的文件不变动，changes回退至add之前</li><li>–hard：改变HEAD指针，改变暂存区和工作区。文件和changes均会变动</li></ol><h3 id="rebase-i"><a href="#rebase-i" class="headerlink" title="rebase -i"></a>rebase -i</h3><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2">修改历史</a></p><p>已经提交了commit1<del>commit4，想要修改commit2的内容，可以使用`git rebase -i HEAD</del>3<code>在命令行中将commit2前面的</code>pick<code>改为</code>edit<code>然后</code>:wq<code>保存即可开始你的修改，修改完</code>git rebase –continue`收工</p><h3 id="Merge-or-Rebase"><a href="#Merge-or-Rebase" class="headerlink" title="Merge or Rebase ?"></a>Merge or Rebase ?</h3><p><code>merge</code>会产生merge commit，但是只需要解决一次冲突</p><p><code>rebase</code>不会产生merge commit，但是需要对每一个待rebase的commit都解决一次冲突</p><p>公司的日常开发要求尽量让整个工程在一条线上，即尽量使用<code>rebase</code></p><p>个人经验：如果需要开一个分支去完成一个周期较长的需求，在这个需求中你提交了许多的commit，那么在需求完成的时候，master分支必定被其他人修改过很多地方，这时候如果你去rebase的话，解决merge conflict会比较头疼，所以使用merge比较好；如果你做的需求只需要一两个commit，那么显然使用不会产生merge commit的rebase更好。</p><h3 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a>submodule</h3><p>添加子模块到指定目录<code>git submodule add</code>+<code>URL</code>+<code>Path</code></p><h2 id="Gerrit"><a href="#Gerrit" class="headerlink" title="Gerrit"></a>Gerrit</h2><p>公司使用Gerrit作为代码库，有一些特有的命令</p><ul><li>push代码 <code>git push origin HEAD:refs/for/分支名</code></li><li>向远端推送分支<code>git push origin 待推送分支名</code></li><li>删除远端分支<code>git push origin :待删除分支名</code>（一般需要权限）</li></ul><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><h3 id="git-revert和git-cherry-pick"><a href="#git-revert和git-cherry-pick" class="headerlink" title="git revert和git cherry-pick"></a>git revert和git cherry-pick</h3><p>场景一：</p><ol><li><code>develop</code>分支上提交commit</li><li><code>develop</code>分支上切出<code>feature</code>分支</li><li><code>develop</code>分支对commit revert</li><li><code>feature</code> merge到<code>develop</code></li></ol><p>问题：从<code>feature</code> merge回<code>develop</code>后，<code>feature</code>中的commit能否被带回<code>develop</code>？</p><p>答：不会</p><p>由于<code>feature</code>中的commitId和步骤3中被revert的commitId一致，因此结果就是feature merge回develop后，该commit也是不存在的</p><p>场景二：</p><ol><li><code>develop</code>分支上切出<code>feature</code>分支</li><li><code>develop</code>分支上提交commit</li><li><code>feature</code>分支对commit进行cherry-pick</li><li><code>develop</code>分支对commit revert</li><li><code>feature</code> merge到<code>develop</code></li></ol><p>同样的问题：从<code>feature</code> merge回<code>develop</code>后，<code>feature</code>中的commit能否被带回<code>develop</code>？</p><p>答：会</p><p>因为cherry-pick虽然会将commit的内容搬过去，但是commitId会变，属于一个新的commit，不会被revert掉</p>]]></content>
      
      
      <categories>
          
          <category> efficiency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="uncategorized/hello-world/"/>
      <url>uncategorized/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
